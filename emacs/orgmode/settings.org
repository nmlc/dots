* bootstrap
#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-enable-at-startup nil)
(setq package-archives
  '(("elpa"     . "http://elpa.gnu.org/packages/")
   ("melpa"     . "https://melpa.org/packages/")))

(package-initialize)

(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)
(setq ring-bell-function 'ignore)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(use-package exec-path-from-shell :ensure t)
(use-package dash :ensure t)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Iosevka" :height 130)
(set-face-attribute 'fixed-pitch nil :family "Iosevka")
(set-face-attribute 'variable-pitch nil :family "Baskerville")


(use-package poet-theme :ensure t)
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . light))
(add-hook 'text-mode-hook
               (lambda ()
                (variable-pitch-mode 1)))

(load-theme 'poet-dark-monochrome t)

(use-package org-bullets :ensure t)
(setq org-bullets-bullet-list
        '("◉" "○"))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(use-package olivetti :ensure t)
(add-hook 'org-mode-hook (lambda () 
            (olivetti-mode 1)
            (olivetti-set-width 120)))
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-modules 'org-habit 'org-protocol)
(require 'org-habit)
(require 'org-protocol)

(setq org-use-property-inheritance "SCHEDULED")
(setq org-habit-preceding-days 30)
(setq org-agenda-show-future-repeats nil)
(setq org-habit-show-habits-only-for-today nil) 
(setq org-agenda-block-separator nil)
(setq org-deadline-warning-days 30)
(setq org-enforce-todo-dependencies nil)
(setq org-clock-sound t)
(setq org-show-notification-handler (lambda (msg) (alert msg)))
; for time reports
(setq org-duration-format (quote h:mm))
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

(setq org-capture-templates
 '(("c" "todo" entry (file+headline "~/org/todo.org" "todo")
               "*  %?  \n")))

#+END_SRC
** org-images
#+BEGIN_SRC emacs-lisp
(use-package org-download :ensure t)
(setq-default org-download-image-dir "~/org/images")
(setq-default org-download-screenshot-method "pngpaste %s")
(setq-default org-download-heading-lvl nil)
(setq org-image-actual-width nil)
(setq org-download-image-org-width 650)
#+END_SRC

** org-agenda
#+BEGIN_SRC emacs-lisp
; for agenda notes
(setq org-log-into-drawer t)

(setq org-agenda-span 7
      org-agenda-start-on-weekday nil)
#+END_SRC
** org-indent
#+BEGIN_SRC emacs-lisp
; https://emacs.stackexchange.com/questions/7432/make-visual-line-mode-more-compatible-with-org-mode
; https://www.reddit.com/r/emacs/comments/97naje/what_is_everyones_org_mode_indentation_preferences/
; ^^ intersting package
(setq-default org-startup-indented "t")
(add-hook 'org-mode-hook #'visual-line-mode)
#+END_SRC
** org-tasksclock
#+BEGIN_SRC emacs-lisp
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)


(setq bh/keep-clock-running nil)

(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
      ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))
        
(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))
  
(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))
  
(defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")
(defvar bh/interuption-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f8")

(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))
    

(defun nm/clock-in-interuption-task ()
  (interactive)
  (org-with-point-at (org-id-find bh/interuption-task-id 'market)
    (org-clock-in)))
    
(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)



;(global-set-key (kbd "C-c C-x C-m") 'nm/clock-in-interuption-task)

;(defun im/org-clock-in ()
 ; (interactive)
  ;(let* ((time-duration (read-number "Time? ")))
   ; (org-clock-in)
    ;(ignore-errors (org-timer-stop))
    ;(winner-undo)
    ;(org-timer-set-timer time-duration)))

;(defun im/org-clock-out ()
;  (interactive)
 ; (org-clock-out)
  ;(ignore-errors (org-timer-stop)))

;(define-key org-mode-map (kbd "C-c C-x C-i") 'im/org-clock-in)
;(define-key org-mode-map (kbd "C-c C-x C-o") 'im/org-clock-out)
(define-key org-mode-map (kbd "C-c C-x C-m") 'nm/clock-in-interuption-task)

#+END_SRC

#+RESULTS:
: im/org-clock-out
* evil
#+BEGIN_SRC emacs-lisp
(use-package evil :ensure t)
(evil-mode t)
(add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC
* ido
#+BEGIN_SRC emacs-lisp
(use-package ido-completing-read+
  :ensure t
  :init
  (ido-ubiquitous-mode t))

(use-package ido-vertical-mode
  :ensure t
  :init
  (ido-vertical-mode t))

(use-package smex
  :ensure t
  :init (smex-initialize)
  :bind
  ("M-x" . smex))

(setq ido-vertical-define-keys 'C-n-and-C-p-only)
(ido-mode t)
(ido-everywhere t)
(setq ido-enable-flex-matching t)
#+END_SRC
* frame
#+BEGIN_SRC emacs-lisp
; https://stackoverflow.com/a/32509408
(defun my/get-frame-by-name (fname)
  "If there is a frame with named FNAME, return it, else nil."
  (require 'dash)                       ; For `-some'
  (-some (lambda (frame)
           (when (equal fname (frame-parameter frame 'name))
             frame))
         (frame-list)))

 (defun make-org-frame ()  
   "Create a new frame"  
   (interactive)
   (setq frame-resize-pixelwise t)
   (if (not (my/get-frame-by-name "orgx"))
        (make-frame '((name . "orgx") 
                 (width . 60)
                 (height . 10)))
   )
   (select-frame-by-name "orgx")
   (toggle-scroll-bar -1))

#+END_SRC
* chrome-bookmarks
#+BEGIN_SRC emacs-lisp
(defvar chrome-bookmarks-file
  (cl-find-if
   #'file-exists-p
   ;; Base on `helm-chrome-file'
   (list
   ; "~/Library/Application Support/Google/Chrome/Profile 1/Bookmarks"
    "~/Library/Application Support/Google/Chrome/Default/Bookmarks"
    ;"~/AppData/Local/Google/Chrome/User Data/Default/Bookmarks"
    ;"~/.config/google-chrome/Default/Bookmarks"
    ;"~/.config/chromium/Default/Bookmarks"
    ;(substitute-in-file-name
     ;"$LOCALAPPDATA/Google/Chrome/User Data/Default/Bookmarks")
    ;(substitute-in-file-name
     ;"$USERPROFILE/Local Settings/Application Data/Google/Chrome/User ;Data/Default/Bookmarks")
))
  "Path to Google Chrome Bookmarks file (it's JSON).")

(defun chrome-bookmarks-insert-as-org ()
  "Insert Chrome Bookmarks as org-mode headings."
  (interactive)
  (require 'json)
  (require 'org)
  (let ((data (let ((json-object-type 'alist)
                    (json-array-type  'list)
                    (json-key-type    'symbol)
                    (json-false       nil)
                    (json-null        nil))
                (json-read-file chrome-bookmarks-file)))
        level)
    (cl-labels ((fn
                 (al)
                 (pcase (alist-get 'type al)
                   ("folder"
                    (insert
                     (format "%s %s\n"
                             (make-string level ?*)
                             (alist-get 'name al)))
                    (cl-incf level)
                    (mapc #'fn (alist-get 'children al))
                    (cl-decf level))
                   ("url"
                    (insert
                     (format "%s %s\n"
                             (make-string level ?*)
                             (org-make-link-string
                              (alist-get 'url al)
                              (alist-get 'name al))))))))
      (setq level 1)
      (fn (alist-get 'bookmark_bar (alist-get 'roots data)))
      (setq level 1)
      (fn (alist-get 'other (alist-get 'roots data))))))
#+END_SRC
